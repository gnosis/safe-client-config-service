name: "CI"

# The workflow should be triggered on any push and release events.
# Release events can push tags (triggering a push event).
# Therefore:
#  - docker-publish-staging – is only triggered on push events to main branch
#  - docker-publish-release – is only triggered on release events
on:
  push:
  release:
    types: [ released ]

jobs:
  flake8:
    name: flake8
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - run: python -m pip install flake8
      - name: flake8
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: flake8
          run: flake8

  isort:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - run: python -m pip install isort
      - name: isort
        uses: liskin/gh-problem-matcher-wrap@v1
        with:
          linters: isort
          run: isort --check --profile black src/

  black:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - run: python -m pip install black
      - name: black
        run: black --check src/

  django-check:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    env:
      SECRET_KEY: 'insecure_key_for_dev'
      POSTGRES_HOST: localhost
      POSTGRES_PORT: 5432
    steps:
      - name: Check out repository code
        uses: actions/checkout@v2.3.4
      - uses: actions/cache@v2.1.6
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.9
      - name: Install dependencies
        run: |
          pip install -r requirements-dev.txt
      - name: Check pending migrations
        run: python src/manage.py makemigrations --check --dry-run
      - name: Run migrations
        run: python src/manage.py migrate
      - name: Django System Check
        run: python src/manage.py check
      - name: Run tests with coverage
        run: coverage run --source=src/ -m pytest src
      - name: Upload coverage
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: coveralls --service=github

  docker-publish-staging:
    # Publish staging image only on push events to main
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [flake8, isort, black, django-check]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          push: true
          # Target production image from multi-stage build (check Dockerfile)
          target: production
          tags: gnosispm/safe-config-service:staging
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

  docker-publish-release:
    # Publish production image only on release events
    if: github.event_name == 'release' && github.event.action == 'released'
    needs: [ flake8, isort, black, django-check ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.5.1
      - name: Cache Docker layers
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to DockerHub
        uses: docker/login-action@v1.10.0
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2.7.0
        with:
          context: .
          push: true
          # Target production image from multi-stage build (check Dockerfile)
          target: production
          # github.event.release.tag_name only exists on release event types
          tags: gnosispm/safe-config-service:${{ github.event.release.tag_name }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache-new
      - # Temp fix
        # https://github.com/docker/build-push-action/issues/252
        # https://github.com/moby/buildkit/issues/1896
        name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}
