# Generated by Django 4.2.4 on 2023-08-28 16:12

import re

import django.core.validators
import django.db.models.deletion
from django.apps.registry import Apps
from django.db import migrations, models
from django.db.backends.base.schema import BaseDatabaseSchemaEditor
from django.db.models import F

from ..models import (
    Feature,
    native_currency_path,
    validate_native_currency_size,
    validate_tx_service_url,
)

# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# chains.migrations.0019_add_safe_apps_rpc
# chains.migrations.0020_block_explorer_templates
# chains.migrations.0023_create_gas_price_model
# chains.migrations.0029_chain_short_name
# chains.migrations.0031_chain_block_explorer_uri_api_template
# chains.migrations.0032_feature
# chains.migrations.0033_walletnew
# chains.migrations.0034_add_public_rpc_url

# List retrieved from https://chainid.network/shortNameMapping.json on September 30, 2021
SHORT_NAME_MAPPING = {
    1: "eth",
    2: "exp",
    3: "rop",
    4: "rin",
    5: "gor",
    6: "kot",
    7: "tch",
    8: "ubq",
    9: "tubq",
    10: "oeth",
    11: "meta",
    12: "kal",
    13: "dstg",
    14: "flr",
    15: "diode",
    16: "cflr",
    17: "tfi",
    18: "TST",
    19: "sgb",
    20: "elaeth",
    21: "elaetht",
    22: "eladid",
    23: "eladidt",
    30: "rsk",
    31: "trsk",
    32: "GooDT",
    33: "GooD",
    35: "tbwg",
    38: "val",
    40: "Telos EVM",
    41: "Telos EVM Testnet",
    42: "kov",
    43: "darwinia",
    44: "crab",
    50: "xdc",
    51: "TXDC",
    52: "cet",
    53: "tcet",
    56: "bnb",
    57: "sys",
    58: "Ontology Mainnet",
    59: "EOS Mainnet",
    60: "go",
    61: "etc",
    62: "tetc",
    63: "metc",
    64: "ella",
    65: "tokt",
    66: "okt",
    67: "dbm",
    68: "SO1",
    69: "okov",
    76: "mix",
    77: "poa",
    78: "primuschain",
    80: "GeneChain",
    82: "Meter",
    85: "gttest",
    86: "gt",
    88: "tomo",
    95: "Kylin Testnet",
    97: "bnbt",
    99: "skl",
    100: "xdai",
    101: "eti",
    102: "w3g",
    108: "TT",
    110: "xpr",
    111: "ETL",
    122: "fuse",
    124: "dwu",
    127: "feth",
    128: "heco",
    137: "matic",
    142: "dax",
    162: "tpht",
    163: "pht",
    170: "hoosmartchain",
    172: "resil",
    200: "aox",
    211: "EDI",
    246: "ewt",
    250: "ftm",
    256: "hecot",
    269: "hpb",
    321: "kcs",
    322: "kcst",
    361: "theta-mainnet",
    363: "theta-sapphire",
    364: "theta-amber",
    365: "theta-testnet",
    369: "pls",
    385: "lisinski",
    420: "ogor",
    499: "rupx",
    558: "tao",
    595: "maca",
    686: "kar",
    721: "tfeth",
    777: "cth",
    787: "aca",
    803: "haic",
    820: "clo",
    821: "tclo",
    888: "wan",
    940: "tpls",
    977: "yeti",
    999: "twan",
    1001: "Baobab",
    1007: "tnew",
    1010: "EVC",
    1012: "new",
    1022: "sku",
    1023: "tclv",
    1024: "clv",
    1139: "MATH",
    1140: "tMATH",
    1284: "mbeam",
    1285: "mriver",
    1286: "mrock",
    1287: "mbase",
    1288: "mshadow",
    1618: "cate",
    1620: "ath",
    1856: "tsf",
    1987: "egem",
    2020: "420",
    2021: "edg",
    2022: "edgt",
    2559: "ktoc",
    4002: "tftm",
    4689: "iotex-mainnet",
    4690: "iotex-testnet",
    5197: "es",
    5700: "tsys",
    5851: "Ontology Testnet",
    5869: "rbd",
    8029: "mdgl",
    8080: "GeneChainAdn",
    8217: "Cypress",
    8285: "Kortho",
    8723: "olo",
    8724: "tolo",
    8995: "berg",
    10000: "smartbch",
    10001: "smartbchtest",
    10101: "GEN",
    16000: "mtt",
    16001: "mtttest",
    24484: "web",
    24734: "mintme",
    31102: "esn",
    31337: "got",
    32659: "fsn",
    39797: "nrg",
    42069: "PC",
    42161: "arb1",
    42220: "CELO",
    43110: "avaeth",
    43113: "Fuji",
    43114: "Avalanche",
    44787: "ALFA",
    49797: "tnrg",
    62320: "BKLV",
    71393: "ckb",
    73799: "vt",
    78110: "firenze",
    80001: "maticmum",
    100000: "qkc-r",
    100001: "qkc-s0",
    100002: "qkc-s1",
    100003: "qkc-s2",
    100004: "qkc-s3",
    100005: "qkc-s4",
    100006: "qkc-s5",
    100007: "qkc-s6",
    100008: "qkc-s7",
    110000: "qkc-d-r",
    110001: "qkc-d-s0",
    110002: "qkc-d-s1",
    110003: "qkc-d-s2",
    110004: "qkc-d-s3",
    110005: "qkc-d-s4",
    110006: "qkc-d-s5",
    110007: "qkc-d-s6",
    110008: "qkc-d-s7",
    200625: "aka",
    246529: "ats",
    246785: "atstau",
    333888: "sparta",
    333999: "olympus",
    421611: "arb-rinkeby",
    1313114: "etho",
    1313500: "xero",
    7762959: "music",
    13371337: "tpep",
    18289463: "ilt",
    20181205: "qki",
    28945486: "auxi",
    35855456: "JOYS",
    61717561: "aqua",
    99415706: "TOYS",
    311752642: "oneledger",
    1122334455: "ipos",
    1313161554: "aurora",
    1313161555: "aurora-testnet",
    1313161556: "aurora-betanet",
    1666600000: "hmy-s0",
    1666600001: "hmy-s1",
    1666600002: "hmy-s2",
    1666600003: "hmy-s3",
    1666700000: "hmy-b-s0",
    1666700001: "hmy-b-s1",
    1666700002: "hmy-b-s2",
    1666700003: "hmy-b-s3",
    3125659152: "pirl",
    4216137055: "frankenstein",
    11297108099: "tpalm",
    11297108109: "palm",
}

QUERY_PARAM_TEMPLATE = (
    "?module={{module}}&action={{action}}&address={{address}}&apiKey={{apiKey}}"
)

API_TEMPLATE_MAPPING = {
    1: f"https://api.etherscan.io/api{QUERY_PARAM_TEMPLATE}",
    4: f"https://api-rinkeby.etherscan.io/api{QUERY_PARAM_TEMPLATE}",
    56: f"https://api.bscscan.com/api{QUERY_PARAM_TEMPLATE}",
    100: f"https://blockscout.com/poa/xdai/api{QUERY_PARAM_TEMPLATE}",
    137: f"https://api.polygonscan.com/api{QUERY_PARAM_TEMPLATE}",
    246: f"https://explorer.energyweb.org/api{QUERY_PARAM_TEMPLATE}",
    42161: f"https://api.arbiscan.io/api{QUERY_PARAM_TEMPLATE}",
    73799: f"https://volta-explorer.energyweb.org/api{QUERY_PARAM_TEMPLATE}",
}


def copy_rpc_fields(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    chain_model = apps.get_model("chains", "chain")
    db_alias = schema_editor.connection.alias
    chain_model.objects.using(db_alias).all().update(
        safe_apps_rpc_uri=F("rpc_uri"),
        safe_apps_rpc_authentication=F("rpc_authentication"),
    )


def copy_block_explorer_uri(
    apps: Apps, schema_editor: BaseDatabaseSchemaEditor
) -> None:
    chain_model = apps.get_model("chains", "chain")
    db_alias = schema_editor.connection.alias
    chain_model.objects.using(db_alias).all().update(
        block_explorer_uri_address_template=F("block_explorer_uri"),
        block_explorer_uri_tx_hash_template=F("block_explorer_uri"),
    )


def copy_gas_prices(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    GasPrice = apps.get_model("chains", "GasPrice")
    Chain = apps.get_model("chains", "Chain")

    GasPrice.objects.bulk_create(
        GasPrice(
            chain=chain,
            oracle_uri=chain.gas_price_oracle_uri,
            oracle_parameter=chain.gas_price_oracle_parameter,
            gwei_factor=chain.gas_price_oracle_gwei_factor,
            fixed_wei_value=chain.gas_price_fixed_wei,
        )
        for chain in Chain.objects.all()
    )


def set_chain_short_name(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Chain = apps.get_model("chains", "Chain")
    for row in Chain.objects.all():
        row.short_name = SHORT_NAME_MAPPING.get(row.id, "")
        row.save(update_fields=["short_name"])


def set_api_url(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Chain = apps.get_model("chains", "Chain")
    for row in Chain.objects.all():
        row.block_explorer_uri_api_template = API_TEMPLATE_MAPPING.get(row.id, "")
        row.save(update_fields=["block_explorer_uri_api_template"])


DEFAULT_FEATURES = [
    Feature(key="CONTRACT_INTERACTION"),
    Feature(key="DOMAIN_LOOKUP"),
    Feature(key="ERC721"),
    Feature(key="ERC1155"),
    Feature(key="SAFE_APPS"),
    Feature(key="SPENDING_LIMIT"),
]


def add_default_features(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Feature = apps.get_model("chains", "Feature")
    Feature.objects.bulk_create(DEFAULT_FEATURES)


def copy_wallets(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    Wallet_Old = apps.get_model("chains", "Wallet")
    Wallet_New = apps.get_model("chains", "WalletNew")

    for wallet in Wallet_Old.objects.all():
        Wallet_New.objects.create(key=wallet.name)


def copy_rpc_fields(apps: Apps, schema_editor: BaseDatabaseSchemaEditor) -> None:
    chain_model = apps.get_model("chains", "Chain")
    db_alias = schema_editor.connection.alias
    chain_model.objects.using(db_alias).all().update(
        public_rpc_uri=F("rpc_uri"),
        public_rpc_authentication=F("rpc_authentication"),
    )


class Migration(migrations.Migration):
    replaces = [
        ("chains", "0001_initial"),
        ("chains", "0002_chain_transaction_service_url"),
        ("chains", "0003_auto_20210617_1444"),
        ("chains", "0004_auto_20210622_1353"),
        ("chains", "0005_chain_relevance"),
        ("chains", "0006_change_color_default_help_text"),
        ("chains", "0007_chain_currency_logo_url"),
        ("chains", "0008_chain_ens_registry_address"),
        ("chains", "0009_chain_gas_price_oracle_gwei_factor"),
        ("chains", "0010_chain_min_master_copy_version"),
        (
            "chains",
            "0011_rename_min_master_copy_version_chain_recommended_master_copy_version",
        ),
        ("chains", "0012_chain_gas_price_fixed_wei"),
        ("chains", "0013_rename_url_uri"),
        ("chains", "0014_alter_chain_transaction_service_uri"),
        ("chains", "0015_alter_chain_currency_name"),
        ("chains", "0016_alter_chain_block_explorer_uri"),
        ("chains", "0017_alter_chain_block_explorer_uri"),
        ("chains", "0018_chain_rpc_authentication"),
        ("chains", "0019_add_safe_apps_rpc"),
        ("chains", "0020_block_explorer_templates"),
        ("chains", "0021_alter_chain_safe_apps_rpc_authentication"),
        ("chains", "0022_remove_chain_block_explorer_uri"),
        ("chains", "0023_create_gas_price_model"),
        ("chains", "0024_remove_gas_price_fields"),
        ("chains", "0025_alter_chain_currency_logo_uri"),
        ("chains", "0026_chain_l2"),
        ("chains", "0027_chain_description"),
        ("chains", "0028_chain_vpc_transaction_service_uri"),
        ("chains", "0029_chain_short_name"),
        ("chains", "0030_wallet"),
        ("chains", "0031_chain_block_explorer_uri_api_template"),
        ("chains", "0032_feature"),
        ("chains", "0033_walletnew"),
        ("chains", "0034_add_public_rpc_url"),
        ("chains", "0035_alter_chain_currency_logo_uri"),
        ("chains", "0036_alter_chain_transaction_service_uri_and_more"),
        ("chains", "0037_chain_hidden"),
        ("chains", "0038_gasprice_max_fee_per_gas_and_more"),
    ]

    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Chain",
            fields=[
                (
                    "id",
                    models.PositiveBigIntegerField(
                        primary_key=True, serialize=False, verbose_name="Chain Id"
                    ),
                ),
                ("name", models.CharField(max_length=255, verbose_name="Chain name")),
                ("rpc_uri", models.URLField()),
                ("block_explorer_uri", models.URLField()),
                ("currency_name", models.CharField(max_length=255)),
                ("currency_symbol", models.CharField(max_length=255)),
                ("currency_decimals", models.IntegerField(default=18)),
                ("transaction_service_uri", models.URLField()),
                (
                    "theme_background_color",
                    models.CharField(
                        default="#000000",
                        help_text="Please use the following format: <em>#RRGGBB</em>.",
                        max_length=9,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^#[0-9a-fA-F]{6}$"),
                                "Invalid hex color",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "theme_text_color",
                    models.CharField(
                        default="#ffffff",
                        help_text="Please use the following format: <em>#RRGGBB</em>.",
                        max_length=9,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile("^#[0-9a-fA-F]{6}$"),
                                "Invalid hex color",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "gas_price_oracle_parameter",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                ("gas_price_oracle_uri", models.URLField(blank=True, null=True)),
                ("relevance", models.SmallIntegerField(default=100)),
                (
                    "currency_logo_uri",
                    models.URLField(
                        default="https://cryptologos.cc/logos/ethereum-eth-logo.png"
                    ),
                ),
                ("ens_registry_address", models.CharField(blank=True, null=True)),
                (
                    "gas_price_oracle_gwei_factor",
                    models.DecimalField(
                        decimal_places=9,
                        default=1,
                        help_text="Factor required to reach the Gwei unit",
                        max_digits=19,
                        verbose_name="Gwei multiplier factor",
                    ),
                ),
                (
                    "recommended_master_copy_version",
                    models.CharField(
                        default="1.3.0",
                        max_length=255,
                        validators=[
                            django.core.validators.RegexValidator(
                                re.compile(
                                    "^(0|[1-9]\\d*)\\.(0|[1-9]\\d*)\\.(0|[1-9]\\d*)(?:-((?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\\.(?:0|[1-9]\\d*|\\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\\+([0-9a-zA-Z-]+(?:\\.[0-9a-zA-Z-]+)*))?$"
                                ),
                                "Invalid version (semver)",
                                "invalid",
                            )
                        ],
                    ),
                ),
                (
                    "gas_price_fixed_wei",
                    models.DecimalField(
                        max_digits=79,
                        decimal_places=0,
                        blank=True,
                        null=True,
                        verbose_name="Fixed gas price (wei)",
                    ),
                ),
                (
                    "rpc_authentication",
                    models.CharField(
                        choices=[
                            ("API_KEY_PATH", "Api Key Path"),
                            ("NO_AUTHENTICATION", "No Authentication"),
                        ],
                        default="API_KEY_PATH",
                        max_length=255,
                    ),
                ),
                (
                    "safe_apps_rpc_authentication",
                    models.CharField(
                        choices=[
                            ("API_KEY_PATH", "Api Key Path"),
                            ("NO_AUTHENTICATION", "No Authentication"),
                        ],
                        default="NO_AUTHENTICATION",
                        max_length=255,
                    ),
                ),
                ("safe_apps_rpc_uri", models.URLField(default="")),
            ],
        ),
        migrations.RunPython(
            copy_rpc_fields,
            migrations.RunPython.noop,
        ),
        migrations.AddField(
            model_name="chain",
            name="block_explorer_uri_address_template",
            field=models.URLField(default=""),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="chain",
            name="block_explorer_uri_tx_hash_template",
            field=models.URLField(default=""),
            preserve_default=False,
        ),
        migrations.RunPython(
            copy_block_explorer_uri,
            migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="chain",
            name="safe_apps_rpc_authentication",
            field=models.CharField(
                choices=[
                    ("API_KEY_PATH", "Api Key Path"),
                    ("NO_AUTHENTICATION", "No Authentication"),
                ],
                default="NO_AUTHENTICATION",
                max_length=255,
            ),
        ),
        migrations.RemoveField(
            model_name="chain",
            name="block_explorer_uri",
        ),
        migrations.CreateModel(
            name="GasPrice",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("oracle_uri", models.URLField(blank=True, null=True)),
                (
                    "oracle_parameter",
                    models.CharField(blank=True, max_length=255, null=True),
                ),
                (
                    "gwei_factor",
                    models.DecimalField(
                        decimal_places=9,
                        default=1,
                        help_text="Factor required to reach the Gwei unit",
                        max_digits=19,
                        verbose_name="Gwei multiplier factor",
                    ),
                ),
                (
                    "fixed_wei_value",
                    models.DecimalField(
                        max_digits=79,
                        decimal_places=0,
                        blank=True,
                        null=True,
                        verbose_name="Fixed gas price (wei)",
                    ),
                ),
                ("rank", models.SmallIntegerField(default=100)),
                (
                    "chain",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="chains.chain"
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            copy_gas_prices,
            migrations.RunPython.noop,
        ),
        migrations.RemoveField(
            model_name="chain",
            name="gas_price_fixed_wei",
        ),
        migrations.RemoveField(
            model_name="chain",
            name="gas_price_oracle_gwei_factor",
        ),
        migrations.RemoveField(
            model_name="chain",
            name="gas_price_oracle_parameter",
        ),
        migrations.RemoveField(
            model_name="chain",
            name="gas_price_oracle_uri",
        ),
        migrations.AlterField(
            model_name="chain",
            name="currency_logo_uri",
            field=models.ImageField(max_length=255, upload_to=native_currency_path),
        ),
        migrations.AddField(
            model_name="chain",
            name="l2",
            field=models.BooleanField(default=False),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="chain",
            name="description",
            field=models.CharField(blank=True, max_length=255),
        ),
        migrations.AddField(
            model_name="chain",
            name="vpc_transaction_service_uri",
            field=models.URLField(default=""),
            preserve_default=False,
        ),
        migrations.AddField(
            model_name="chain",
            name="short_name",
            field=models.CharField(
                max_length=255,
                null=True,
                unique=True,
                verbose_name="EIP-3770 short name",
            ),
            preserve_default=False,
        ),
        migrations.RunPython(
            set_chain_short_name,
            migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="chain",
            name="short_name",
            field=models.CharField(
                max_length=255, unique=True, verbose_name="EIP-3770 short name"
            ),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="Wallet",
            fields=[
                (
                    "name",
                    models.CharField(max_length=255, primary_key=True, serialize=False),
                ),
                (
                    "chains",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Chains where this wallet is enabled.",
                        to="chains.chain",
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="chain",
            name="block_explorer_uri_api_template",
            field=models.URLField(null=True),
            preserve_default=False,
        ),
        migrations.RunPython(
            set_api_url,
            migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="chain",
            name="block_explorer_uri_api_template",
            field=models.URLField(),
            preserve_default=False,
        ),
        migrations.CreateModel(
            name="Feature",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="The unique name/key that identifies this feature",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "chains",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Chains where this feature is enabled.",
                        to="chains.chain",
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            add_default_features,
            migrations.RunPython.noop,
        ),
        migrations.CreateModel(
            name="WalletNew",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "key",
                    models.CharField(
                        help_text="The unique name/key that identifies this wallet",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "chains",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Chains where this wallet is enabled.",
                        to="chains.chain",
                    ),
                ),
            ],
        ),
        migrations.RunPython(
            copy_wallets,
            migrations.RunPython.noop,
        ),
        migrations.DeleteModel(
            name="Wallet",
        ),
        migrations.RenameModel(
            old_name="WalletNew",
            new_name="Wallet",
        ),
        migrations.AddField(
            model_name="chain",
            name="public_rpc_authentication",
            field=models.CharField(
                choices=[
                    ("API_KEY_PATH", "Api Key Path"),
                    ("NO_AUTHENTICATION", "No Authentication"),
                ],
                default="NO_AUTHENTICATION",
                max_length=255,
            ),
        ),
        migrations.AddField(
            model_name="chain",
            name="public_rpc_uri",
            field=models.URLField(null=True),
            preserve_default=False,
        ),
        migrations.RunPython(
            copy_rpc_fields,
            migrations.RunPython.noop,
        ),
        migrations.AlterField(
            model_name="chain",
            name="public_rpc_uri",
            field=models.URLField(),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="chain",
            name="currency_logo_uri",
            field=models.ImageField(
                max_length=255,
                upload_to=native_currency_path,
                validators=[validate_native_currency_size],
            ),
        ),
        migrations.AlterField(
            model_name="chain",
            name="transaction_service_uri",
            field=models.CharField(
                max_length=255, validators=[validate_tx_service_url]
            ),
        ),
        migrations.AlterField(
            model_name="chain",
            name="vpc_transaction_service_uri",
            field=models.CharField(
                max_length=255, validators=[validate_tx_service_url]
            ),
        ),
        migrations.AddField(
            model_name="chain",
            name="hidden",
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name="gasprice",
            name="max_fee_per_gas",
            field=models.DecimalField(
                max_digits=79,
                decimal_places=0,
                blank=True,
                null=True,
                verbose_name="Max fee per gas (wei)",
            ),
        ),
        migrations.AddField(
            model_name="gasprice",
            name="max_priority_fee_per_gas",
            field=models.DecimalField(
                max_digits=79,
                decimal_places=0,
                blank=True,
                null=True,
                verbose_name="Max priority fee per gas (wei)",
            ),
        ),
    ]
